#include<stdio.h>
#include<stdlib.h>

struct Node{
    int key;
    struct Node* left;
    struct Node* right;
    int height; // getting node height
};

int max(int a , int b){
    return a > b ? a : b;
}

int get_Height(struct Node * n){ 
    if(n == NULL){
        return 0;
    }else{
        return n->height; // returns the height of tree
    }
}

struct Node * CreateNode(int key){
    struct Node * node = (struct Node*)malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; // Whenever we create a tree it always becomes a leaf node first. so height is 1

    return node;
}

int get_BalanceFactor(struct Node * n){
    if(n == NULL){
        printf("Balanced factor is 1");
        return 0;
    }else{
        //return n->left->height - n->right->height;
        return get_Height(n->left) - get_Height(n->right);
    }
}

struct Node * Right_Rotate(struct Node* y){
    struct Node * x = y->left;
    struct Node * p = x->right;

    x->right = y;
    y->left = p;

    y->height = max(get_Height(y->right) , get_Height(y->left)) + 1;
    x->height = max(get_Height(x->right) , get_Height(x->left)) + 1;

    return x;
}

struct Node * Left_Rotate(struct Node* x){
    struct Node * y = x->right;
    struct Node * p = y->left;

    y->left = x;
    x->right = p;

    y->height = max(get_Height(y->right) , get_Height(y->left)) + 1;
    x->height = max(get_Height(x->right) , get_Height(x->left)) + 1;

    return y;
}

struct Node * Insert(struct Node * node , int key){
    if (node == NULL){
        return (CreateNode(key));
    }

    if (key < node->key){
        node->left = Insert(node->left , key);
    }

    else if (key > node->key){
        node->right = Insert(node->right , key);
        return node;
    }
    node->height = 1 + max(get_Height(node->left) , get_Height(node->right));
    int bf = get_BalanceFactor(node);

    //Left left case

    if(bf > 1 && key < node->left->key){
        return Right_Rotate(node);
    }

    // Right right case

    if(bf <- 1 && key > node->right->key){
        return Left_Rotate(node);
    }

    // Left right case

    if(bf > 1 && key > node->left->key){
        node->left = Left_Rotate(node->left);
        return Right_Rotate(node);
    }

    // Right left case

    if(bf < -1 && key < node->right->key){
        node->right = Right_Rotate(node->right);
        return Left_Rotate(node);
    }

    return node;
}

void preOrder(struct Node* root){
    if(root != NULL){
        printf("%d ",root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}

int main(){
    struct Node * root = NULL;

    root = Insert(root , 1);
    root = Insert(root , 2);
    root = Insert(root , 4);
    root = Insert(root , 5);
    root = Insert(root , 6);
    root = Insert(root , 3);
    preOrder(root);
    return 0;
}